In the worst case scenario, where the algorithm explores all possible permutations of the cities, 
the time complexity would be factorial, O(n!), where n is the number of cities.


#######################################################################################################
Test cases


# Test case 1: 3 places
places_test_1 = ['Dorado Park', 'Khomasdal', 'Katutura']
distances_test_1 = {
    ('Dorado Park', 'Khomasdal'): 7,
    ('Dorado Park', 'Katutura'): 20,
    ('Khomasdal', 'Dorado Park'): 10,
    ('Khomasdal', 'Katutura'): 6,
    ('Katutura', 'Dorado Park'): 20,
    ('Katutura', 'Khomasdal'): 6
}
optimal_path_1, optimal_distance_1 = hill_climbing(places_test_1, distances_test_1)
print("Test Case 1:")
print(f"Optimal route: {optimal_path_1}")
print(f"Optimal distance: {optimal_distance_1} km")

# Test case 2: 4 places
places_test_2 = ['Dorado Park', 'Khomasdal', 'Katutura', 'Eros']
distances_test_2 = {
    ('Dorado Park', 'Khomasdal'): 7,
    ('Dorado Park', 'Katutura'): 20,
    ('Dorado Park', 'Eros'): 15,
    ('Khomasdal', 'Dorado Park'): 10,
    ('Khomasdal', 'Katutura'): 6,
    ('Khomasdal', 'Eros'): 14,
    ('Katutura', 'Dorado Park'): 20,
    ('Katutura', 'Khomasdal'): 6,
    ('Katutura', 'Eros'): 25,
    ('Eros', 'Dorado Park'): 15,
    ('Eros', 'Khomasdal'): 14,
    ('Eros', 'Katutura'): 25
}
optimal_path_2, optimal_distance_2 = hill_climbing(places_test_2, distances_test_2)
print("\nTest Case 2:")
print(f"Optimal route: {optimal_path_2}")
print(f"Optimal distance: {optimal_distance_2} km")

# Test case 3: 5 places
places_test_3 = ['Dorado Park', 'Khomasdal', 'Katutura', 'Eros', 'Klein Windhoek']
distances_test_3 = {
    ('Dorado Park', 'Khomasdal'): 7,
    ('Dorado Park', 'Katutura'): 20,
    ('Dorado Park', 'Eros'): 15,
    ('Dorado Park', 'Klein Windhoek'): 12,
    ('Khomasdal', 'Dorado Park'): 10,
    ('Khomasdal', 'Katutura'): 6,
    ('Khomasdal', 'Eros'): 14,
    ('Khomasdal', 'Klein Windhoek'): 18,
    ('Katutura', 'Dorado Park'): 20,
    ('Katutura', 'Khomasdal'): 6,
    ('Katutura', 'Eros'): 25,
    ('Katutura', 'Klein Windhoek'): 30,
    ('Eros', 'Dorado Park'): 15,
    ('Eros', 'Khomasdal'): 14,
    ('Eros', 'Katutura'): 25,
    ('Eros', 'Klein Windhoek'): 2,
    ('Klein Windhoek', 'Dorado Park'): 12,
    ('Klein Windhoek', 'Khomasdal'): 18,
    ('Klein Windhoek', 'Katutura'): 30,
    ('Klein Windhoek', 'Eros'): 2
}
optimal_path_3, optimal_distance_3 = hill_climbing(places_test_3, distances_test_3)
print("\nTest Case 3:")
print(f"Optimal route: {optimal_path_3}")
print(f"Optimal distance: {optimal_distance_3} km")

# Additional test cases can be added similarly for different numbers of places.



####################################################################################################################################
Compare total to optimal.

Optimal route: ['Eros', 'Klein Windhoek', 'Dorado Park', 'Khomasdal', 'Katutura']

Optimal distance: 27 km


Optimal route: ['Dorado Park', 'Katutura', 'Klein Windhoek', 'Khomasdal', 'Eros']
Optimal distance: 82 km

By comparing the total distance with the optimal distance, we can see that there's a potential saving of 44 km (71 km - 27 km) 
by following the optimal route identified by the hill climbing algorithm. This signifies the importance of finding efficient 
travel paths to minimize travel time and resource consumption.
Found it through exhaustive testing.

#################################################################################
18 times for total for total distance iteration
7 times for optimal distance.







